[
["3-data-visualization.html", "3 Data Visualization 3.1 Bar Chart 3.2 Scatter Plot 3.3 Animation", " 3 Data Visualization In this section, we will use the following libraries and data: library(tidyverse) ## Warning: package &#39;tidyverse&#39; was built under R version 3.6.3 ## -- Attaching packages ------------------------------------------------------------------------------------------------------------------------------------------ tidyverse 1.3.0 -- ## v ggplot2 3.2.1 v purrr 0.3.3 ## v tibble 2.1.3 v dplyr 1.0.0 ## v tidyr 1.0.2 v stringr 1.4.0 ## v readr 1.3.1 v forcats 0.4.0 ## Warning: package &#39;dplyr&#39; was built under R version 3.6.3 ## -- Conflicts --------------------------------------------------------------------------------------------------------------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(gganimate) ## Warning: package &#39;gganimate&#39; was built under R version 3.6.3 slgname &lt;- read_csv(&quot;data_sources/saved_data/slgname.csv&quot;) ## Parsed with column specification: ## cols( ## player_id = col_character(), ## h = col_double(), ## doubles = col_double(), ## triples = col_double(), ## hr = col_double(), ## ab = col_double(), ## g = col_double(), ## slg = col_double(), ## player = col_character() ## ) To drive towards an end goal as we learn about ggplot, lets try to visually depect the players with the top 20 career hit totals. 3.1 Bar Chart slgname ## # A tibble: 1,564 x 9 ## player_id h doubles triples hr ab g slg player ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 ruthba01 2873 506 136 714 8398 2503 0.69 Babe Ruth ## 2 willite01 2654 525 71 521 7706 2292 0.634 Ted Williams ## 3 gehrilo01 2721 534 163 493 8001 2164 0.632 Lou Gehrig ## 4 foxxji01 2646 458 125 534 8134 2317 0.609 Jimmie Foxx ## 5 bondsba01 2935 601 77 762 9847 2986 0.607 Barry Bonds ## 6 greenha01 1628 379 71 331 5193 1394 0.605 Hank Greenberg ## 7 mcgwima01 1626 252 6 583 6187 1874 0.588 Mark McGwire ## 8 ramirma02 2574 547 20 555 8244 2302 0.585 Manny Ramirez ## 9 dimagjo01 2214 389 131 361 6821 1736 0.579 Joe DiMaggio ## 10 hornsro01 2930 541 169 301 8173 2259 0.577 Rogers Hornsby ## # ... with 1,554 more rows Canvas The base layer of any ggplot object is simply the “canvas” in which you will build your plot. slgname %&gt;% ggplot() Mapping We will “map” each element of the data to the canvas. Elements which can be mapped include x, y, color, fill, size, alpha, and a few others. slgname %&gt;% ggplot(aes(x=player, y = hr)) Filter Data To keep the plot clean, we’ll filter for the top 20 players by career hits. slgname %&gt;% slice_max(order_by = h, n = 20) %&gt;% # top_n(20, h) %&gt;% ggplot(aes(x=player, y = hr)) Plot ‘mechanism’ Next we add the type of plot. There are a ton and can be explored here. We will only explore a couple. Also, we should point out the simplicity of ggplot. Each ‘layer’ is added sequentially. slgname %&gt;% slice_max(order_by = h, n = 20) %&gt;% ggplot(aes(x=player, y = hr)) + geom_col() Coordinate Flip Bar plots often suffere from difficult to read x axes. We can fix that with a coordinate flip. slgname %&gt;% slice_max(order_by = h, n = 20) %&gt;% ggplot(aes(x=player, y = hr)) + geom_col() + coord_flip() Reorder Factors This is nice, but it doesn’t easily present the information we are trying to convey. Lets reorder the factors of the barplot. slgname %&gt;% slice_max(order_by = h, n = 20) %&gt;% ggplot(aes(x=fct_reorder(player,hr), y = hr)) + geom_col() + coord_flip() Color Bars Lets add some more information to the plot by coloring the bars by the players slugging percentage. slgname %&gt;% slice_max(order_by = h, n = 20) %&gt;% ggplot(aes(x=fct_reorder(player,hr), y = hr, fill = slg)) + geom_col() + coord_flip() Update Labels Lets update our plot labels to help the plot tell the story of the data. Notice in the labs() function, you simply provide the information you would like to present to the mapped value. slgname %&gt;% slice_max(order_by = h, n = 20) %&gt;% ggplot(aes(x=fct_reorder(player,hr), y = hr, fill = slg)) + geom_col() + coord_flip() + labs(x = &quot;Player&quot;, y = &quot;Home Runs&quot;, title = &quot;Top 20 Home Run Hitters&quot;, fill = &quot;Slugging Percentage&quot;, subtitle = &quot;1871-2016&quot;, caption = &quot;*Among Players Who&#39;ve Played at least 1000 games&quot;) 3.2 Scatter Plot Next, lets show the functionality of the scatter plot. Lets explore the trajectory of the home runs per season since 1990 Lets start with our origional data: data &lt;- read_csv(&quot;data_sources/Batting.csv&quot;, col_types = cols(SF = col_double(), GIDP = col_double())) %&gt;% clean_names() scatterdat &lt;- data %&gt;% filter(lg_id == &quot;AL&quot;) %&gt;% filter(year_id&gt;1990) %&gt;% mutate(team_id = fct_lump(team_id, n = 12)) %&gt;% filter(team_id != &quot;Other&quot;) %&gt;% filter(complete.cases(.)) %&gt;% group_by(team_id,year_id) %&gt;% summarise_at(.vars = vars(g:gidp),.funs = list(sum)) scatterdat ## # A tibble: 312 x 19 ## # Groups: team_id [12] ## team_id year_id g ab r h x2b x3b hr rbi sb cs ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BAL 1991 2365 5604 686 1421 256 29 170 660 50 33 ## 2 BAL 1992 2183 5485 705 1423 243 36 148 680 89 48 ## 3 BAL 1993 2127 5508 786 1470 287 24 157 744 73 54 ## 4 BAL 1994 1473 3856 589 1047 185 20 139 557 69 13 ## 5 BAL 1995 2046 4837 704 1267 229 27 173 668 92 45 ## 6 BAL 1996 2245 5689 949 1557 299 29 257 914 76 40 ## 7 BAL 1997 2282 5584 812 1498 264 22 196 780 63 26 ## 8 BAL 1998 2359 5565 817 1520 303 11 214 783 86 48 ## 9 BAL 1999 2300 5637 851 1572 299 21 203 804 107 46 ## 10 BAL 2000 2210 5549 794 1508 310 22 184 750 126 65 ## # ... with 302 more rows, and 7 more variables: bb &lt;dbl&gt;, so &lt;dbl&gt;, ibb &lt;dbl&gt;, ## # hbp &lt;dbl&gt;, sh &lt;dbl&gt;, sf &lt;dbl&gt;, gidp &lt;dbl&gt; Canvas scatterdat %&gt;% ggplot() Mapping scatterdat %&gt;% ggplot(aes(x=year_id,y=hr,color = team_id)) Plot ‘mechanism’: geom_point() geom_point() creates a scatterplot. scatterdat %&gt;% ggplot(aes(x=year_id,y=hr,color = team_id)) + geom_point() 3.2.1 Arrange Teams by Least to Most Home Runs Using fct_reorder, we can order the teams by most to least home runs. scatterdat %&gt;% ggplot(aes(x=year_id,y=hr,color = fct_reorder(team_id,-hr))) + geom_point() Plot ‘mechanism’: geom_smooth() We can stack layers to help tell the story of our data. scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; How does ggplot determine that line? LOWESS - LOcally WEighted Scatterplot Smoothing LOESS - LOcally Estimated Scatterplot Smoothing Controlled by the term span. Smaller equals more “wigglyness” span = 1 scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth(span = 1) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; span = .1 scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth(span = 1) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Both scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth(span = .1) + geom_smooth(span = 1, color = &quot;red&quot;) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at 1990.9 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 2.125 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 1.9879e-016 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 4.5156 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## 1990.9 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 2.125 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 1.9879e-016 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 4.5156 ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Facet Plots ggplot offers the ability to ‘facet’ plots by a variable. This can help show contrats between different factors. scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth() + facet_wrap(~team_id) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Update Labels As before, we can update the labels. scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth() + facet_wrap(~team_id) + labs(title = &quot;Home Run Changes Over Time&quot;, subtitle = paste(&quot;From&quot;, min(scatterdat$year_id), &quot;to&quot;, max(scatterdat$year_id)), color = &quot;Team&quot;, x = &quot;Season&quot;, y = &quot;Season Home Run Total&quot;) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Change Smoothing Line Earlier, we talked about the LOESS smoother. We can change the line type we impose on our scatter plots. In this instance, we can apply a best fit linear regression line. scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~team_id) + labs(title = &quot;Home Run Changes Over Time&quot;, subtitle = paste(&quot;From&quot;, min(scatterdat$year_id), &quot;to&quot;, max(scatterdat$year_id)), color = &quot;Team&quot;, x = &quot;Season&quot;, y = &quot;Season Home Run Total&quot;) 3.3 Animation While not rendered here, we will briefly display the ability to animate a ggplot. We’ve created some new data to support animation showing the change in the number of home runs and strike outs over the years. animdata &lt;- data %&gt;% filter(!is.na(lg_id)) %&gt;% group_by(year_id, team_id) %&gt;% summarise_at(vars(hr, so, bb, ab), ~ sum(., na.rm = TRUE)) %&gt;% ungroup() %&gt;% inner_join(data %&gt;% select(year_id, team_id, lg_id) %&gt;% distinct()) animdata ## # A tibble: 2,785 x 7 ## year_id team_id hr so bb ab lg_id ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1876 BSN 9 98 58 2722 NL ## 2 1876 CHN 8 45 70 2748 NL ## 3 1876 CN1 4 136 41 2372 NL ## 4 1876 HAR 2 78 39 2664 NL ## 5 1876 LS1 6 98 24 2570 NL ## 6 1876 NY3 2 35 18 2180 NL ## 7 1876 PHN 7 36 27 2387 NL ## 8 1876 SL3 2 63 59 2478 NL ## 9 1877 BSN 4 121 65 2368 NL ## 10 1877 CHN 0 111 57 2273 NL ## # ... with 2,775 more rows We’ll talk through the code below. While it does not render in the book, we’ll run it in console and talk through the process. There are many gganimate options and you can explore further here p &lt;- animdata %&gt;% ggplot(aes(x = so,y = hr, color = bb,size = ab,group = year_id)) + geom_point() + facet_wrap(~ lg_id) + transition_states(year_id,transition_length = 1,state_length = 30) + labs(title = &quot;The Change in Home Runs and Strike Outs Over The Years&quot;, subtitle = &#39;Year: {closest_state}&#39;, x = &quot;Strike Outs&quot;, y = &quot;Home Runs&quot;) + # labs(title = &#39;Year: {closest_state, cache = TRUE}&#39;) + enter_fade() + exit_fade() animate(p,nframes = length(unique(data$year_id)) * 2) "]
]
